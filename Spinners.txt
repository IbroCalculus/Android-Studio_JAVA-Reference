

===================================== METHOD 1 (Easier/Better for dynamic data)	========================================

        spinner = findViewById(R.id.spinner);

        final ArrayList <String> countries = new ArrayList<String>();
        countries.add("Nigeria");
        countries.add("Angola");
        countries.add("Ghana");

        ArrayAdapter<String> countriesAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_dropdown_item, countries);
        spinner.setAdapter(countriesAdapter);

NB: There are multiple types of adapters. But we work with arrayAdapter in this case
    android.R.layout.simple_spinner_dropdown_item -> A built in layout, we can customize personal layout if need be.
    To view the simple_spinner... layout, click down ctrl and click the ..simple.spinner..., but NOTE, the layout is not editable.

======================	HANDLING EVENT LISTENERS	====================================

        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                String msg = "You clicked Item " + i + " which is " + countries.get(i) + " and " + spinner.getItemAtPosition(i);
                Toast.makeText(MainActivity.this, msg, Toast.LENGTH_LONG).show();
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });



===================================== METHOD 2 (Better for static data)	========================================

Create data to display in the spinner in res->values->Strings.xml. in string-array with id; i.e spinner_list:

<resources>
    <string name="app_name">TestApp</string>

    <string-array name="spinner_list">
        <item>First Item</item>
        <item>Second Item</item>
        <item>Third Item</item>
        <item>Fourth Item</item>
        <item>Fifth Item</item>
    </string-array>
</resources>

IN DESIGN VIEW, SET ENTRIES TO THE STRING ARRAY. ie:
        android:entries="@array/spinner_list"

IN JAVA:

        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                String msg = "You clicked Item " + i + " which is " + spinner.getSelectedItem().toString() + " and " + spinner.getItemAtPosition(i);
                Toast.makeText(MainActivity.this, msg, Toast.LENGTH_LONG).show();
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });



===================================== METHOD 3 (Better for static data/Similar to METHOD 2)	========================================

Create data to display in the spinner in res->values->Strings.xml. in string-array with id; i.e spinner_list:

<resources>
    <string name="app_name">TestApp</string>

    <string-array name="spinner_list">
        <item>First Item</item>
        <item>Second Item</item>
        <item>Third Item</item>
        <item>Fourth Item</item>
        <item>Fifth Item</item>
    </string-array>
</resources>

IN JAVA:
Spinner spinner;
...
spinner = findViewById(R.id.spinner);

*Create an adapter for the spinner and apply to spinner as a drop down view.

        ArrayAdapter spinnerAdapter = new ArrayAdapter(getApplicationContext(),
                android.R.layout.simple_list_item_1,
                getResources().getStringArray(R.array.spinner_list));

        spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(spinnerAdapter);

spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                //Toast.makeText(MainActivity.this, "You clicked on "+ position, Toast.LENGTH_SHORT).show();

		String itemSelected = parent.getItemAtPosition(position).toString();
                Toast.makeText(MainActivity.this, "You clicked on: " + itemSelected, Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                Toast.makeText(MainActivity.this, "Nothing selected", Toast.LENGTH_SHORT).show();
            }
        });

